import React, { useEffect, useState } from 'react';\nimport { getEventStreamManager, ConnectionStatus as Status } from '../services/eventStreamManager';\nimport { getOfflineCommandQueue } from '../services/offlineCommandQueue';\n\nexport const ConnectionStatus: React.FC = () => {\n  const [connectionStatus, setConnectionStatus] = useState<Status>('disconnected');\n  const [queueSize, setQueueSize] = useState(0);\n  const [reconnectingFor, setReconnectingFor] = useState(0);\n\n  useEffect(() => {\n    const eventStreamManager = getEventStreamManager();\n    const offlineQueue = getOfflineCommandQueue();\n    \n    // Subscribe to connection status changes\n    const unsubscribeStatus = eventStreamManager.onStatusChange((status) => {\n      setConnectionStatus(status);\n      \n      if (status === 'connected') {\n        setReconnectingFor(0);\n        // Flush queued commands when reconnected\n        offlineQueue.flush();\n      }\n    });\n\n    // Update queue size periodically\n    const updateQueueSize = () => {\n      setQueueSize(offlineQueue.getQueueSize());\n    };\n    \n    const queueInterval = setInterval(updateQueueSize, 1000);\n    updateQueueSize(); // Initial update\n\n    // Track reconnection time\n    let reconnectTimer: NodeJS.Timeout | null = null;\n    if (connectionStatus === 'reconnecting') {\n      reconnectTimer = setInterval(() => {\n        setReconnectingFor(prev => prev + 1);\n      }, 1000);\n    }\n\n    return () => {\n      unsubscribeStatus();\n      clearInterval(queueInterval);\n      if (reconnectTimer) {\n        clearInterval(reconnectTimer);\n      }\n    };\n  }, [connectionStatus]);\n\n  const getStatusIcon = () => {\n    switch (connectionStatus) {\n      case 'connected':\n        return 'ðŸŸ¢';\n      case 'connecting':\n        return 'ðŸŸ¡';\n      case 'reconnecting':\n        return 'ðŸŸ¡';\n      case 'disconnected':\n        return 'ðŸ”´';\n      default:\n        return 'âšª';\n    }\n  };\n\n  const getStatusText = () => {\n    switch (connectionStatus) {\n      case 'connected':\n        return 'Connected';\n      case 'connecting':\n        return 'Connecting...';\n      case 'reconnecting':\n        return `Reconnecting... (${reconnectingFor}s)`;\n      case 'disconnected':\n        return 'Disconnected';\n      default:\n        return 'Unknown';\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (connectionStatus) {\n      case 'connected':\n        return 'text-green-600';\n      case 'connecting':\n      case 'reconnecting':\n        return 'text-yellow-600';\n      case 'disconnected':\n        return 'text-red-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  return (\n    <div className=\"flex items-center space-x-2 text-sm\">\n      <div className={`flex items-center space-x-1 ${getStatusColor()}`}>\n        <span>{getStatusIcon()}</span>\n        <span className=\"font-medium\">{getStatusText()}</span>\n      </div>\n      \n      {queueSize > 0 && (\n        <div className=\"text-orange-600 text-xs\">\n          <span className=\"font-medium\">{queueSize}</span> queued\n        </div>\n      )}\n      \n      {connectionStatus === 'reconnecting' && (\n        <div className=\"animate-pulse text-xs text-gray-500\">\n          Attempting to reconnect...\n        </div>\n      )}\n    </div>\n  );\n};